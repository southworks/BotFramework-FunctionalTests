#
# Executes the test scenarios.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(BUILD.BUILDID)
trigger: none
pr: none

resources:
  pipelines:
  - pipeline: "02ADeploySkillBots"
    source: "02.A. Deploy skill bots (daily)"
    trigger:
      branches:
        include:
        - main
        - releases/*

variables:
  BuildConfiguration: "Debug"
  BuildPlatform: "Any CPU"

  ## Azure Resources (Define these variables in Azure)
  # AzureSubscription: Service Connection Name to Manage Azure resources.
  # ResourceGroup: (optional) Name of the Resource Group where the bots are deployed.
  # ResourceSuffix: (optional) Alphanumeric suffix to add to the resources' name to avoid collisions.

  ## Bots Configuration (Define these variables in Azure)
  # BffnComposerSkillBotDotNetAppId: (optional) App Id for BffnComposerSkillBotDotNet bot.
  # BffnEchoSkillBotComposerDotNetAppId: (optional) App Id for BffnEchoSkillBotComposerDotNet bot.
  # BffnEchoSkillBotDotNetAppId: (optional) App Id for BffnEchoSkillBotDotNet bot.
  # BffnEchoSkillBotDotNetV3AppId: (optional) App Id for BffnEchoSkillBotDotNetV3 bot.
  # BffnEchoSkillBotJSAppId: (optional) App Id for BffnEchoSkillBotJS bot.
  # BffnEchoSkillBotJSV3AppId: (optional) App Id for BffnEchoSkillBotJSV3 bot.
  # BffnEchoSkillBotPythonAppId: (optional) App Id for BffnEchoSkillBotPython bot.
  # BffnWaterfallSkillBotDotNetAppId: (optional) App Id for BffnWaterfallSkillBotDotNet bot.
  # BffnWaterfallSkillBotJSAppId: (optional) App Id for BffnWaterfallSkillBotJS bot.
  # BffnWaterfallSkillBotPythonAppId: (optional) App Id for BffnWaterfallSkillBotPython bot.
  # DeployBotResourcesGuid: (optional) Deploy Bot Resources pipeline GUID.

  ## Internal variables
  InternalKeyVaultName: "bffnbotkeyvault$(INTERNALRESOURCESUFFIX)"
  InternalResourceGroupName: $[coalesce(variables['RESOURCEGROUP'], 'BFFN')]
  InternalResourceSuffix: $[coalesce(variables['RESOURCESUFFIX'], '')]

pool:
  vmImage: "windows-2019"

stages:
  # - stage: "Download_Variables"
  #   displayName: "Download Variables"
  #   jobs:
  #     - job: "Download_Variables"
  #       displayName: "Download Variables"
  #       steps:
  #         - checkout: none
  #         - powershell: |
  #             $pipelineGuid = if ([string]::IsNullOrEmpty("$env:DEPLOYBOTRESOURCESGUID")) { "02.A. Deploy skill bots (daily)" } else { "$(DEPLOYBOTRESOURCESGUID)" }
  #             Write-Host "Deploy Bot Resources Pipeline GUID: " $pipelineGuid
  #             Write-Host "##vso[task.setvariable variable=PipelineGuid]$pipelineGuid"
  #           displayName: "Set Deploy Bot Resources GUID"

  #         - task: DownloadPipelineArtifact@2
  #           displayName: "Download Variables artifact"
  #           inputs:
  #             source: "specific"
  #             project: "$(SYSTEM.TEAMPROJECT)"
  #             pipeline: "$(PIPELINEGUID)"
  #             allowPartiallySucceededBuilds: true
  #             allowFailedBuilds: true
  #             artifact: "Variables"
  #             path: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Variables/"

  #         - powershell: |
  #             $deploymentBuildSuffix = (Get-Content -Path "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Variables/variables.json" | ConvertFrom-Json).deploymentBuildSuffix
  #             Write-Host "Deployment Build Suffix: " $deploymentBuildSuffix
  #             Write-Host "##vso[task.setvariable variable=DeploymentBuildSuffix;isOutput=true]-$deploymentBuildSuffix"
  #           displayName: "Set variables"
  #           name: "Set_Variables"

  # - template: runScenario.yml
  #   parameters:
  #     appIds:
  #       ComposerSkillBotDotNet: "$(BFFNCOMPOSERSKILLBOTDOTNETAPPID)"
  #       EchoSkillBotComposerDotNet: "$(BFFNECHOSKILLBOTCOMPOSERDOTNETAPPID)"
  #       EchoSkillBotDotNet: "$(BFFNECHOSKILLBOTDOTNETAPPID)"
  #       EchoSkillBotDotNetV3: "$(BFFNECHOSKILLBOTDOTNETV3APPID)"
  #       EchoSkillBotJS: "$(BFFNECHOSKILLBOTJSAPPID)"
  #       EchoSkillBotJSV3: "$(BFFNECHOSKILLBOTJSV3APPID)"
  #       EchoSkillBotPython: "$(BFFNECHOSKILLBOTPYTHONAPPID)"
  #       WaterfallSkillBotDotNet: "$(BFFNWATERFALLSKILLBOTDOTNETAPPID)"
  #       WaterfallSkillBotJS: "$(BFFNWATERFALLSKILLBOTJSAPPID)"
  #       WaterfallSkillBotPython: "$(BFFNWATERFALLSKILLBOTPYTHONAPPID)"
  #     azureSubscription: "$(AZURESUBSCRIPTION)"
  #     buildConfiguration: "$(BUILDCONFIGURATION)"
  #     buildIdSuffix: $[stageDependencies.Download_Variables.Download_Variables.outputs['Set_Variables.DeploymentBuildSuffix']]
  #     keyVault: "$(INTERNALKEYVAULTNAME)"
  #     resourceGroup: "$(INTERNALRESOURCEGROUPNAME)"
  #     resourceSuffix: "$(INTERNALRESOURCESUFFIX)"
  #     scenarios:
  #       - name: Waterfall
  #         dependsOn: [Download_Variables]
  #         testCategories:
  #           - Attachments
  #           - CardActions
  #           - ProactiveMessages
  #           - FileUpload
  #           - SignIn

  #       - name: SingleTurn
  #         dependsOn: [Download_Variables]
  #         testCategories:
  #           - SingleTurn

  # - stage: "Build"
  #   displayName: "Build FunctionalTests.sln"
  #   jobs:
  #     - job: "Build"
  #       displayName: "Build FunctionalTests.sln"
  #       steps:
  #         - task: UseDotNet@2
  #           displayName: "Use .Net Core sdk 3.1.x"
  #           inputs:
  #             version: 3.1.x

  #         # - task: MSBuild@1
  #         #   displayName: "Build"
  #         #   inputs:
  #         #     solution: "FunctionalTests.sln"
  #         #     vsVersion: 16.0
  #         #     platform: "$(BUILDPLATFORM)"
  #         #     configuration: "$(BUILDCONFIGURATION)"
          
  #         # - task: DotNetCoreCLI@2
  #         #   displayName: "Build"
  #         #   inputs:
  #         #     command: publish
  #         #     publishWebProjects: false
  #         #     projects: "FunctionalTests.sln"
  #         #     arguments: "--output $(SYSTEM.DEFAULTWORKINGDIRECTORY)/FunctionalTests-Build"
  #         #     modifyOutputPath: false

  #         - task: DotNetCoreCLI@2
  #           displayName: "Build"
  #           inputs:
  #             command: publish
  #             publishWebProjects: false
  #             projects: |
  #               Tests/Functional/FunctionalTests.csproj
  #               Tests/Integration/DotNet/IntegrationTests.csproj
  #             arguments: "--output $(BUILD.ARTIFACTSTAGINGDIRECTORY)/Build"
  #             modifyOutputPath: true

  #         # - task: DotNetCoreCLI@2
  #         #   displayName: "Build"
  #         #   inputs:
  #         #     command: publish
  #         #     publishWebProjects: false
  #         #     projects: "FunctionalTests.sln"
  #         #     arguments: "--output $(BUILD.ARTIFACTSTAGINGDIRECTORY)/Build"
  #         #     modifyOutputPath: true

  #         - task: PowerShell@2
  #           displayName: 'Prepare Artifact'
  #           inputs:
  #             targetType: inline
  #             failOnStderr: true
  #             workingDirectory: $(BUILD.ARTIFACTSTAGINGDIRECTORY)
  #             script: |
  #               Move-Item -Path "Build/DotNet.zip" -Destination "Publish/Integration/"
  #               Move-Item -Path "Build/Functional.zip" -Destination "Publish/Functional/"

  #         - script: |
  #             cd $(BUILD.ARTIFACTSTAGINGDIRECTORY)
  #             dir *.* /s
  #           displayName: 'Dir workspace'
  #           continueOnError: true
  #           condition: succeededOrFailed()

  #         - task: PublishBuildArtifacts@1
  #           displayName: 'Publish Build'
  #           inputs:
  #             pathToPublish: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Publish"
  #             artifactName: "Build"
  - stage: "Build_DotNet_Integration"
    displayName: "Build DotNet Integration"
    jobs:
      - job: "Build"
        displayName: "Build IntegrationTests.csproj"
        steps:
          - task: UseDotNet@2
            displayName: "Use .Net Core sdk 3.1.x"
            inputs:
              version: 3.1.x

          - task: DotNetCoreCLI@2
            displayName: "Build"
            inputs:
              command: publish
              publishWebProjects: false
              projects: "Tests/Integration/DotNet/IntegrationTests.csproj"
              arguments: "--output $(BUILD.ARTIFACTSTAGINGDIRECTORY)/Build"
              modifyOutputPath: true

          - task: PowerShell@2
            displayName: 'Prepare Artifact'
            inputs:
              targetType: inline
              failOnStderr: true
              workingDirectory: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)"
              script: |
                New-Item -Path "Publish/Integration/" -ItemType Directory
                Move-Item -Path "Build/DotNet.zip" -Destination "Publish/Integration/DotNet.zip"

          - script: |
              cd $(BUILD.ARTIFACTSTAGINGDIRECTORY)
              dir *.* /s
            displayName: 'Dir workspace'
            continueOnError: true
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build'
            inputs:
              pathToPublish: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Publish"
              artifactName: "Build"

  - stage: "Test_DotNet_Integration"
    displayName: "Test DotNet Integration"
    dependsOn: [Build_DotNet_Integration]
    jobs:
      - job: "Test"
        displayName: "Test IntegrationTests.csproj"
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Build"
            inputs:
              artifactName: "Build"

          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Build/Integration/DotNet.zip"
              destinationFolder: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Tests/Integration/DotNet/bin/Debug/netcoreapp3.1"
              cleanDestinationFolder: true 

          - script: |
              cd Tests/Integration/DotNet/bin/Debug/netcoreapp3.1
              dir *.* /s
            displayName: 'Dir workspace'
            continueOnError: true
            condition: succeededOrFailed()

          # - task: DotNetCoreCLI@2
          #   displayName: "Test"
          #   inputs:
          #     command: test
          #     testRunTitle: "Integration-DotNet"
          #     projects: "Tests/Integration/DotNet/IntegrationTests.csproj"
          #     arguments: "-v n --configuration $(BUILDCONFIGURATION) --no-build --no-restore --logger trx;LogFileName=Integration-DotNet-$(BUILD.BUILDNUMBER).trx"

          - task: DotNetCoreCLI@2
            displayName: "Test"
            inputs:
              command: custom
              custom: vstest
              testRunTitle: "Integration-DotNet"
              projects: "Tests/Integration/DotNet/IntegrationTests.csproj"
              arguments: "Tests/Integration/DotNet/bin/Debug/netcoreapp3.1/IntegrationTests.dll -lt --logger trx;LogFileName=Integration-DotNet-$(BUILD.BUILDNUMBER).trx"