#
# Executes the test scenarios.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(BUILD.BUILDID)
trigger: none
pr: none

resources:
  pipelines:
  - pipeline: "02ADeploySkillBots"
    source: "02.A. Deploy skill bots (daily)"
    trigger:
      branches:
        include:
        - main
        - releases/*

variables:
  BuildConfiguration: "Debug"
  BuildPlatform: "Any CPU"

  ## Azure Resources (Define these variables in Azure)
  # AzureSubscription: Service Connection Name to Manage Azure resources.
  # ResourceGroup: (optional) Name of the Resource Group where the bots are deployed.
  # ResourceSuffix: (optional) Alphanumeric suffix to add to the resources' name to avoid collisions.
  # SharedResourceGroup: (optional) Name of the Shared Resource Group.

  ## Bots Configuration (Define these variables in Azure)
  # BffnComposerSkillBotDotNetAppId: (optional) App Id for BffnComposerSkillBotDotNet bot.
  # BffnEchoSkillBotComposerDotNetAppId: (optional) App Id for BffnEchoSkillBotComposerDotNet bot.
  # BffnEchoSkillBotDotNetAppId: (optional) App Id for BffnEchoSkillBotDotNet bot.
  # BffnEchoSkillBotDotNetV3AppId: (optional) App Id for BffnEchoSkillBotDotNetV3 bot.
  # BffnEchoSkillBotJSAppId: (optional) App Id for BffnEchoSkillBotJS bot.
  # BffnEchoSkillBotJSV3AppId: (optional) App Id for BffnEchoSkillBotJSV3 bot.
  # BffnEchoSkillBotPythonAppId: (optional) App Id for BffnEchoSkillBotPython bot.
  # BffnWaterfallSkillBotDotNetAppId: (optional) App Id for BffnWaterfallSkillBotDotNet bot.
  # BffnWaterfallSkillBotJSAppId: (optional) App Id for BffnWaterfallSkillBotJS bot.
  # BffnWaterfallSkillBotPythonAppId: (optional) App Id for BffnWaterfallSkillBotPython bot.
  # DeployBotResourcesGuid: (optional) Deploy Bot Resources pipeline GUID.

  ## Internal variables
  InternalCosmosDbName: "bffnbotstatedb$(INTERNALRESOURCESUFFIX)"
  InternalKeyVaultName: "bffnbotkeyvault$(INTERNALRESOURCESUFFIX)"
  InternalResourceGroupName: $[coalesce(variables['RESOURCEGROUP'], 'BFFN')]
  InternalResourceSuffix: $[coalesce(variables['RESOURCESUFFIX'], '')]
  InternalSharedResourceGroupName: $[coalesce(variables['SHAREDRESOURCEGROUP'], 'BFFN-Shared')]

pool:
  vmImage: "windows-2019"

stages:
  # - stage: "Download_Variables"
  #   displayName: "Download Variables"
  #   jobs:
  #     - job: "Download_Variables"
  #       displayName: "Download Variables"
  #       steps:
  #         - checkout: none
  #         - powershell: |
  #             $pipelineGuid = if ([string]::IsNullOrEmpty("$env:DEPLOYBOTRESOURCESGUID")) { "02.A. Deploy skill bots (daily)" } else { "$(DEPLOYBOTRESOURCESGUID)" }
  #             Write-Host "Deploy Bot Resources Pipeline GUID: " $pipelineGuid
  #             Write-Host "##vso[task.setvariable variable=PipelineGuid]$pipelineGuid"
  #           displayName: "Set Deploy Bot Resources GUID"

  #         - task: DownloadPipelineArtifact@2
  #           displayName: "Download Variables artifact"
  #           inputs:
  #             source: "specific"
  #             project: "$(SYSTEM.TEAMPROJECT)"
  #             pipeline: "$(PIPELINEGUID)"
  #             allowPartiallySucceededBuilds: true
  #             allowFailedBuilds: true
  #             artifact: "Variables"
  #             path: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Variables/"

  #         - powershell: |
  #             $deploymentBuildSuffix = (Get-Content -Path "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Variables/variables.json" | ConvertFrom-Json).deploymentBuildSuffix
  #             Write-Host "Deployment Build Suffix: " $deploymentBuildSuffix
  #             Write-Host "##vso[task.setvariable variable=DeploymentBuildSuffix;isOutput=true]-$deploymentBuildSuffix"
  #           displayName: "Set variables"
  #           name: "Set_Variables"

  # - template: runScenario.yml
  #   parameters:
  #     appIds:
  #       ComposerSkillBotDotNet: "$(BFFNCOMPOSERSKILLBOTDOTNETAPPID)"
  #       EchoSkillBotComposerDotNet: "$(BFFNECHOSKILLBOTCOMPOSERDOTNETAPPID)"
  #       EchoSkillBotDotNet: "$(BFFNECHOSKILLBOTDOTNETAPPID)"
  #       EchoSkillBotDotNetV3: "$(BFFNECHOSKILLBOTDOTNETV3APPID)"
  #       EchoSkillBotJS: "$(BFFNECHOSKILLBOTJSAPPID)"
  #       EchoSkillBotJSV3: "$(BFFNECHOSKILLBOTJSV3APPID)"
  #       EchoSkillBotPython: "$(BFFNECHOSKILLBOTPYTHONAPPID)"
  #       WaterfallSkillBotDotNet: "$(BFFNWATERFALLSKILLBOTDOTNETAPPID)"
  #       WaterfallSkillBotJS: "$(BFFNWATERFALLSKILLBOTJSAPPID)"
  #       WaterfallSkillBotPython: "$(BFFNWATERFALLSKILLBOTPYTHONAPPID)"
  #     azureSubscription: "$(AZURESUBSCRIPTION)"
  #     buildConfiguration: "$(BUILDCONFIGURATION)"
  #     buildIdSuffix: $[stageDependencies.Download_Variables.Download_Variables.outputs['Set_Variables.DeploymentBuildSuffix']]
  #     keyVault: "$(INTERNALKEYVAULTNAME)"
  #     resourceGroup: "$(INTERNALRESOURCEGROUPNAME)"
  #     resourceSuffix: "$(INTERNALRESOURCESUFFIX)"
  #     scenarios:
  #       - name: Waterfall
  #         dependsOn: [Download_Variables]
  #         testCategories:
  #           - Attachments
  #           - CardActions
  #           - ProactiveMessages
  #           - FileUpload
  #           - SignIn

  #       - name: SingleTurn
  #         dependsOn: [Download_Variables]
  #         testCategories:
  #           - SingleTurn

  - stage: "Build_DotNet_Integration"
    displayName: "Build DotNet Integration"
    dependsOn: []
    jobs:
      - job: "Build"
        displayName: "Build IntegrationTests.csproj"
        steps:
          - template: build.yml
            parameters:
              project: "Tests/Integration/DotNet/IntegrationTests.csproj"
              publish:
                zipName: "DotNet"
                destFolder: "Integration"

  - stage: "Build_DotNet_Functional"
    displayName: "Build DotNet Functional"
    dependsOn: []
    jobs:
      - job: "Build"
        displayName: "Build FunctionalTests.csproj"
        steps:
          - template: build.yml
            parameters:
              project: "Tests/Functional/FunctionalTests.csproj"
              publish:
                zipName: "DotNet"
                destFolder: "Functional"

  - stage: "Test_DotNet_Integration"
    displayName: "Test DotNet Integration"
    dependsOn: [Build_DotNet_Integration]
    jobs:
      - job: "Test_Azure_CosmosDb"
        displayName: "Test Azure.CosmosDb"
        steps:
          - template: ../getCosmosDbConnectionVariables.yml
            parameters:
              azureSubscription: "$(AZURESUBSCRIPTION)"
              resourceName: "$(INTERNALCOSMOSDBNAME)"
              resourceGroup: "$(INTERNALSHAREDRESOURCEGROUPNAME)"
          - template: test.yml
            parameters:
              zip: "Integration/DotNet"
              dll: "IntegrationTests"
              namespace: "IntegrationTests.Azure"
              trx: "Integration-DotNet-$(BUILD.BUILDNUMBER)"
              env:
                Azure:CosmosDb:ServiceEndpoint: "$(COSMOSDBSERVICEENDPOINT)"
                Azure:CosmosDb:AuthKey: "$(COSMOSDBAUTHKEY)"




# Test

          # - task: AzureCLI@2
          #   displayName: "Set CosmosDb Connection variables"
          #   inputs:
          #     azureSubscription: "$(AZURESUBSCRIPTION)"
          #     scriptType: pscore
          #     scriptLocation: inlineScript
          #     failOnStderr: true
          #     inlineScript: |
          #       $connection, $rest = az cosmosdb keys list --name $(INTERNALCOSMOSDBNAME) --resource-group $(INTERNALSHAREDRESOURCEGROUPNAME) --type connection-strings | ConvertFrom-Json | Select-Object -ExpandProperty connectionStrings | Select-Object -ExpandProperty connectionString;

          #       $AccountEndpoint, $AccountKey = $connection.Trim(";") -split ";";
          #       $endpoint = $AccountEndpoint -replace "AccountEndpoint=";
          #       $key = $AccountKey -replace "AccountKey=";

          #       if ([string]::IsNullOrEmpty($endpoint) -or [string]::IsNullOrEmpty($key)) {
          #         Write-Host "##vso[task.logissue type=error]CosmosDb ServiceEndpoint and AuthKey couldn't be retrieved from Azure."
          #         exit 1 # Force exit
          #       }

          #       Write-Host "CosmosDb Connection variables:";
          #       [PSCustomObject]@{ 
          #         ServiceEndpoint = $endpoint
          #         AuthKey = $key.Substring(0, 3) + "***"
          #       } | Format-Table -AutoSize

          #       Write-Host "##vso[task.setvariable variable=AzureCosmosDbServiceEndpoint]$endpoint";
          #       Write-Host "##vso[task.setvariable variable=AzureCosmosDbAuthKey]$key";

          # - task: DownloadBuildArtifacts@0
          #   displayName: "Download Build"
          #   inputs:
          #     artifactName: "Build"

          # - task: ExtractFiles@1
          #   displayName: "Extract Build"
          #   inputs:
          #     archiveFilePatterns: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Build/Integration/DotNet.zip"
          #     destinationFolder: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Tests"
          #     cleanDestinationFolder: true 

          # - task: DotNetCoreCLI@2
          #   displayName: "Test"
          #   inputs:
          #     command: custom
          #     custom: vstest
          #     testRunTitle: "Integration-DotNet"
          #     arguments: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Tests/IntegrationTests.dll --logger:\"trx;LogFileName=Integration-DotNet-$(BUILD.BUILDNUMBER).trx\" --TestCaseFilter:FullyQualifiedName~IntegrationTests.Azure"
          #   env:
          #     Azure:CosmosDb:ServiceEndpoint: "$(AZURECOSMOSDBSERVICEENDPOINT)"
          #     Azure:CosmosDb:AuthKey: "$(AZURECOSMOSDBAUTHKEY)"

          # - task: PublishTestResults@2
          #   displayName: "Publish Test Result"
          #   inputs:
          #     testResultsFormat: "VSTest"
          #     testResultsFiles: "TestResults/Integration-DotNet-$(BUILD.BUILDNUMBER).trx"



# build integration

          # - task: UseDotNet@2
          #   displayName: "Use .Net Core sdk 3.1.x"
          #   inputs:
          #     version: 3.1.x

          # - task: DotNetCoreCLI@2
          #   displayName: "Build"
          #   inputs:
          #     command: publish
          #     publishWebProjects: false
          #     projects: "Tests/Integration/DotNet/IntegrationTests.csproj"
          #     arguments: "--output $(BUILD.ARTIFACTSTAGINGDIRECTORY)/Build"
          #     modifyOutputPath: true

          # - task: PowerShell@2
          #   displayName: 'Prepare Publish'
          #   inputs:
          #     targetType: inline
          #     failOnStderr: true
          #     workingDirectory: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)"
          #     script: |
          #       New-Item -Path "Publish/Integration/" -ItemType Directory
          #       Move-Item -Path "Build/DotNet.zip" -Destination "Publish/Integration/DotNet.zip"

          # - task: PublishBuildArtifacts@1
          #   displayName: 'Publish Build'
          #   inputs:
          #     pathToPublish: "$(BUILD.ARTIFACTSTAGINGDIRECTORY)/Publish"
          #     artifactName: "Build"